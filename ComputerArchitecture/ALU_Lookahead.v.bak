// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// PROGRAM		"Quartus II 64-Bit"
// VERSION		"Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"
// CREATED		"Mon Feb 06 22:16:34 2017"

module ALU_Lookahead(
	C_in,
	A,
	B,
	FS,
	Cout,
	F
);


input wire	C_in;
input wire	[15:0] A;
input wire	[15:0] B;
input wire	[4:0] FS;
output wire	Cout;
output wire	[15:0] F;

wire	F_ALTERA_SYNTHESIZED;
wire	G;
wire	[15:0] GND;
wire	[15:0] VCC;
wire	SYNTHESIZED_WIRE_0;
wire	[15:0] SYNTHESIZED_WIRE_1;
wire	[15:0] SYNTHESIZED_WIRE_2;
wire	[15:0] SYNTHESIZED_WIRE_3;
wire	[15:0] SYNTHESIZED_WIRE_4;
wire	[15:0] SYNTHESIZED_WIRE_5;
wire	[15:0] SYNTHESIZED_WIRE_6;
wire	[15:0] SYNTHESIZED_WIRE_7;
wire	[15:0] SYNTHESIZED_WIRE_8;

wire	[15:0] GDFX_TEMP_SIGNAL_0;
wire	[15:0] GDFX_TEMP_SIGNAL_1;


assign	GDFX_TEMP_SIGNAL_0 = {A[14:0],G};
assign	GDFX_TEMP_SIGNAL_1 = {F_ALTERA_SYNTHESIZED,A[15:1]};


\4by16LogicMux 	b2v_inst(
	.I3(FS[3]),
	.I2(FS[2]),
	.I1(FS[1]),
	.I0(FS[0]),
	.A(A),
	.B(B),
	.F(SYNTHESIZED_WIRE_4));



Not_16bit	b2v_inst11(
	.In(A),
	.Out(SYNTHESIZED_WIRE_1));


Not_16bit	b2v_inst12(
	.In(B),
	.Out(SYNTHESIZED_WIRE_8));




\2to1Mux 	b2v_inst15(
	.I0(SYNTHESIZED_WIRE_0),
	.I1(A[15]),
	.S(FS[3]),
	.F(Cout));


\2by16Mux 	b2v_inst2(
	.S(FS[0]),
	.I0(A),
	.I1(SYNTHESIZED_WIRE_1),
	.F(SYNTHESIZED_WIRE_6));


\2by16Mux 	b2v_inst3(
	.S(FS[0]),
	.I0(GDFX_TEMP_SIGNAL_0),
	.I1(GDFX_TEMP_SIGNAL_1),
	.F(SYNTHESIZED_WIRE_3));


\2by16Mux 	b2v_inst4(
	.S(FS[3]),
	.I0(SYNTHESIZED_WIRE_2),
	.I1(SYNTHESIZED_WIRE_3),
	.F(SYNTHESIZED_WIRE_5));


\2by16Mux 	b2v_inst5(
	.S(FS[4]),
	.I0(SYNTHESIZED_WIRE_4),
	.I1(SYNTHESIZED_WIRE_5),
	.F(F));


\16_Bit_CarryLookahead_Adder 	b2v_inst7(
	.Cin(F_ALTERA_SYNTHESIZED),
	.A(SYNTHESIZED_WIRE_6),
	.B(SYNTHESIZED_WIRE_7),
	.Cout(SYNTHESIZED_WIRE_0),
	.F(SYNTHESIZED_WIRE_2));


\4by16Mux 	b2v_inst8(
	.I0(GND),
	.I1(VCC),
	.I2(B),
	.I3(SYNTHESIZED_WIRE_8),
	.S(FS[2:1]),
	.F(SYNTHESIZED_WIRE_7));

assign	F_ALTERA_SYNTHESIZED = C_in;
assign	G = 0;
assign	GND = 16'b0000000000000000;
assign	VCC = 16'b1111111111111111;

endmodule
